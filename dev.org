* Load the project inside emacs

 - Necessary lisp systems(packages) installed one way other another
 - Emacs with ~sly~ installed

 1. Launch sly inside emacs
 2. Using ~sly-compile-and-load-file~ (~C-c C-k~)to load the "awesomes.asdf" file
 3. Execute ~(asdf:load-system :awesomes)~ inside the repl

* Build CSS

#+BEGIN_SRC bash
npm -i # to install the dependencies
#+END_SRC

Use it the build the minified css file
#+BEGIN_SRC bash
make css
#+END_SRC

and this to continuously build the css file when developing
#+BEGIN_SRC bash
make css-dev
#+END_SRC

Tailwindcss works by scanning all the files in the project, then generates a single css file at ./resources/src/output.css, which will be referenced in the html output generated by the lisp program.

* Build the site

If you have modified the source code, check the Build CSS section to build the css file (tailwindcss).

** With Nix

#+BEGIN_SRC bash
nix run .
#+END_SRC

Just works

** Manually compile and execute

You can load the asd file and generate an executable with

#+BEGIN_SRC bash
sbcl --load awesomes.asd
#+END_SRC

Then execute

#+BEGIN_SRC lisp
  (asdf:load-system "awesomes")
  (asdf:make "awesomes")
#+END_SRC

and it will generate an executable ~./awesomes~, you can execute it to build the site.

You can also direct execute the ~generate:generate~ function in Lisp REPL.


* Deploy to github

Push the projects to your github repository.

In the settings of the repo, ~Pages~ -> ~Branch~, choose the suitable branch and directory to "docs" (This program will write outputs to "./docs" by default).

* Misc Notes

** Build the project with nix

~(asdf:make "awesomes")~ doesn't work in nix's ~buildScript~ as it will try to write into the readonly file system. I failed to find a solution.

Using the following script directly inside the ~buildScript~ works though, as showing in flake.nix.
#+BEGIN_SRC lisp
(sb-ext:save-lisp-and-die
            "awesomes"
            :executable t
            #+sb-core-compression :compression
            #+sb-core-compression t
            :toplevel #'generate:generate)
#+END_SRC

