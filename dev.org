* Load the project inside emacs

 - Necessary lisp systems (packages) installed in one way or another
   + This project provides a working flake.nix if you are using nix
 - Emacs with ~sly~ (or slime if you are using it) installed

 1. Launch sly inside emacs
 2. Use ~sly-compile-and-load-file~ (~C-c C-k~) to load the "awesomes.asd" file
 3. Execute ~(asdf:load-system "awesomes")~ inside the repl to load the project.

 The main logic is in the file ~awesomes.lisp~, ~generate.lisp~ is for generating the static pages. There is also a ~server.lisp~ for developing.

* Build CSS file

This project uses [[https://tailwindcss.com/][tailwindcss]].

#+BEGIN_SRC bash
npm -i # to install the dependencies
#+END_SRC

Use it to build the minified css file

#+BEGIN_SRC bash
  npx @tailwindcss/cli -i ./resources/src/style.css -o ./resources/src/output.css -m
#+END_SRC

or use this to continuously build the css file when developing
#+BEGIN_SRC bash
npx @tailwindcss/cli -i ./resources/src/style.css -o ./resources/src/output.css --watch
#+END_SRC

It works by scanning all the files in the project, then generates a single css file at ./resources/src/output.css, which will then be copied and  referenced in the html file generated by the lisp program.

* Build the site

Also check the build css file section.

** With Nix

#+BEGIN_SRC bash
nix run .
#+END_SRC

Just works

** Manually compile and execute

You can load the project and generate an executable with the following instructions

#+BEGIN_SRC bash
  # in shell
  sbcl --load awesomes.asd
#+END_SRC

#+BEGIN_SRC lisp
  # in lisp repl
  (asdf:load-system "awesomes")
  (asdf:make "awesomes")
#+END_SRC

and it will generate an executable ~./awesomes~, you can execute it to build the site.

You can also directly execute the ~generate:generate~ function in Lisp REPL after loading the project.


* Deploy to github

Check the README.org file

* Misc Notes

** Build the project with nix

~(asdf:make "awesomes")~ doesn't work in nix's ~buildScript~ as it will try to write into the readonly file system. I failed to find a solution.

Calling ~sb-ext:save-lisp-and-die~ directly inside the ~buildScript~ works though, as shown in the flake.nix.
#+BEGIN_SRC lisp
(sb-ext:save-lisp-and-die
            "awesomes"
            :executable t
            #+sb-core-compression :compression
            #+sb-core-compression t
            :toplevel #'generate:generate)
#+END_SRC

